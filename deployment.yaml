apiVersion: v1
kind: Namespace
metadata:
  name: projeto-orquestracao
spec: {}
status: {}
---
# Definicao do servico Secret com os usuarios e senhas padrões
apiVersion: v1
kind: Secret
metadata:
  name:  usuario-padrao
  namespace: projeto-orquestracao
data:
   usuario: YWRtaW4=
   senha: c2VuaGEhZGlmaWNpbA==
type: Opaque
---
########################################################################
# 
# Deployment dos serviços utilizados no sistema de detecção de fraudes
# 
# Serviços: RabbitMQ, Redis e MinIO
# 
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: rabbitmq
  name: rabbitmq
  namespace: projeto-orquestracao
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  strategy: {}
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - image: rabbitmq:3-management
        name: rabbitmq
        ports:
          - containerPort: 5672
          - containerPort: 15672
        env:
          - name:  RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                name:  usuario-padrao
                key:  usuario
          - name:  RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                name:  usuario-padrao
                key:  senha
          - name:  RABBITMQ_DEFAULT_VHOST
            value:  projeto
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c 
            - rabbitmq-diagnostics check_port_connectivity | grep -q Successfully
          initialDelaySeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            memory: 512Mi
            cpu: "1"
          requests:
            memory: 256Mi
            cpu: "0.2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
  namespace: projeto-orquestracao
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis/redis-stack
        name: redis
        ports:
          - containerPort: 6379 
          - containerPort: 8001
        env:
          - name:  REDIS_ARGS
            value:  --save 60 1000 --appendonly yes
          - name:  REDISTIMESERIES_ARGS
            value:  "RETENTION_POLICY=20"
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c 
            - redis-cli ping | grep -q PONG
          initialDelaySeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            memory: 512Mi
            cpu: "1"
          requests:
            memory: 256Mi
            cpu: "0.2"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: minio
  name: minio
  namespace: projeto-orquestracao
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  strategy: {}
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - image: docker.io/bitnami/minio
        name: minio
        ports:
          - containerPort: 9000
          - containerPort: 9001
        env:
          - name: MINIO_BROWSER_REDIRECT_URL
            value: "http://projeto.ada/minio/"
          - name:  MINIO_ROOT_USER
            valueFrom:
              secretKeyRef:
                name:  usuario-padrao
                key:  usuario
          - name:  MINIO_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name:  usuario-padrao
                key:  senha
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c 
            - mc alias set myminio http://localhost:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"; 
            - mc ping --exit --quiet myminio > /dev/null
          initialDelaySeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            memory: 512Mi
            cpu: "1"
          requests:
            memory: 256Mi
            cpu: "0.2"
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-console
  namespace: projeto-orquestracao
  labels:
    app: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
  - protocol: TCP
    port: 15672
    targetPort: 15672
---
apiVersion: v1
kind: Service
metadata:
  name: redis-console
  namespace: projeto-orquestracao
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 8001
    targetPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: minio-console
  namespace: projeto-orquestracao
  labels:
    app: minio
spec:
  selector:
    app: minio
  ports:
  - protocol: TCP
    port: 9001
    targetPort: 9001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-ingress
  namespace: projeto-orquestracao
  labels:
    app: rabbitmq
spec:
  rules:
  - host: projeto.ada.rabbitmq
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rabbitmq-console
            port:
              number: 15672
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redis-ingress
  namespace: projeto-orquestracao
  labels:
    app: redis
spec:
  rules:
  - host: projeto.ada.redis
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-console
            port:
              number: 8001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: projeto-orquestracao
  labels:
    app: minio
spec:
  rules:
  - host: projeto.ada.minio
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-console
            port:
              number: 9001
---
########################################################################
# 
# Deployment da palicação de detecção de fraudes
# 
# Pods:
# 
########################################################################




########################################################################
#
# Script para configuração do ambiente:
# 
# minikube addons enable ingress
# bash -c "echo '$(minikube ip) projeto.ada.minio' >> /etc/hosts"
# bash -c "echo '$(minikube ip) projeto.ada.rabbitmq' >> /etc/hosts"
# bash -c "echo '$(minikube ip) projeto.ada.redis' >> /etc/hosts"
#
########################################################################

########################################################################
# 
# Comandos auxiliares:
# kubectl config set-context --current --namespace=projeto-orquestracao
# kubectl proxy --address 0.0.0.0 --accept-hosts 192.168.1.10
# 
########################################################################
